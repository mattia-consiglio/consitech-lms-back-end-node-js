# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Capability {
  id: ID!
  name: String!
}

type ChangeUserOutput {
  message: String!
  user: User
}

type Course {
  createdAt: DateTime!
  description: String
  id: ID!
  order: Float!
  publishStatus: PublishStatus!
  seoId: Float
  slug: String!
  teacherId: Float!
  thumbnail: String
  title: String!
  updatedAt: DateTime!
}

input CreateUserInput {
  """User email address"""
  email: String!

  """User password"""
  password: String!

  """Role name (defaults to Student)"""
  roleName: String

  """Username (optional)"""
  username: String
}

input CreateUserInputPublic {
  """User email address"""
  email: String!

  """User password"""
  password: String!

  """Username (optional)"""
  username: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginInput {
  """Email or username"""
  emailOrUsername: String!
  password: String!
}

type LoginResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Mutation {
  """Create a new user account (requires create_users capability)"""
  createUser(
    """Input data for creating a new user with specified role"""
    createUserInput: CreateUserInput!
  ): User!

  """Delete own user account"""
  deleteOwnUser: ChangeUserOutput!

  """Delete a user account"""
  deleteUser(
    """ID of the user to delete"""
    id: Float!
  ): ChangeUserOutput!

  """Authenticate user and return access token"""
  login(loginInput: LoginInput!): LoginResponse!
  refreshToken(input: RefreshTokenInput!): LoginResponse!

  """Register a new user account with Student role"""
  register(
    """Input data for creating a new user account"""
    createUserInput: CreateUserInputPublic!
  ): User!

  """Update own user account"""
  updateOwnUser(updateUserInput: UpdateUserInput!): ChangeUserOutput!

  """Update an existing user account"""
  updateUser(
    """ID of the user to update"""
    id: Float!

    """New user data"""
    updateUserInput: UpdateUserInput!
  ): ChangeUserOutput!
}

enum Provider {
  GITHUB
  GOOGLE
  LOCAL
}

enum PublishStatus {
  DRAFT
  PUBLISHED
}

type Query {
  courses: [Course!]!
  currentUser: User!
  user(id: Float!): User!
  users: [User!]!
}

input RefreshTokenInput {
  token: String!
}

type Role {
  capabilities: [Capability!]!
  id: ID!
  name: String!
}

input UpdateUserInput {
  email: String
  password: String
  roleName: String
  username: String
}

type User {
  createdAt: DateTime!
  email: String!
  emailVerifiedAt: DateTime
  id: ID!
  provider: Provider
  providerId: String
  role: Role!
  roleId: Float!
  updatedAt: DateTime!
  username: String!
}